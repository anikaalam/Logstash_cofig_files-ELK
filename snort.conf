input {
  beats {
    port => 5044
  }
}

# The filter part of this file is commented out to indicate that it
# is optional.
# filter {
#
# }
filter {
	    if [type] == "snort" {
        dissect { mapping => { "message" => "%{ts} [%{field1}] [%{field2}] %{signature} [%{field5}] [Classification: %{classification}] [Priority: %{priority}] %{restOfLine}" } }
#        parse the message into individual fields
	       grok {
        match => { "message" => "(?<ts>.*\d{2}:\d{2}:\d{2})\s(?<host>.*?)\s.*?\s\[(?<generator_id>.*?)::(?<signature_id>.*?):.*?\]\s(?<signature>.*?)\s\[Classification:\s(?<classification>.*?)\]\s\[Priority:\s(?<priority>.*?)\].*?{(?<protocol>.*?)\}\s(?<source_ip>.*?):(?<source_port>.*?)\s-\>\s(?<destination_ip>.*?):(?<destination_port>.*)" }
        }

#         remove the original message if parsing was successful
	        if !("_grokparsefailure" in [tags]) {
            mutate {
                remove_field => [ "message" ]
            }
        }

        # parse the timestamp and save in a new datetime field
	        if [ts] {
            date {
                match => [ "ts", "MMM dd HH:mm:ss" ]
                target => "sys_timestamp"
            }

            # remove the original timestamp if date parsing was successful
	                if !("_dateparsefailure" in [tags]) {
                mutate {
                    remove_field => [ "ts" ]
                }
            }
        }
 }
  if [system][process] {
   if [system][process][cmdline] {
      dissect { mapping => { "message" => "%{ts} [%{field1}] [%{field2}] %{signature} [%{field5}] [Classification: %{classification}] [Priority: %{priority}] %{restOfLine}" } }

      grok {
        match => { 
          "[system][process][cmdline]" => "^%{PATH:[system][process][cmdline_path]}"
        }
        match => { 
	  "message" => "%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration}"
        }
        match => { 
	  "message" => "%{COMBINEDAPACHELOG}"
        }
        remove_field => "[system][process][cmdline]" 
      }
    }
  }
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
  }
}
